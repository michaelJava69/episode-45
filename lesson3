
## Lesson 3

##
#  Prepariing ansible environment to be able to speak to other servers
#
######################


###

 #!/bin/bash
 
 
# Declare an array of string with type
declare -a StringArray=("web1" "web2" "lb"  )
 
# Iterate the string array using for loop
for val in ${StringArray[@]}; do
   echo addding $val to list of known hosts
   ssh-keyscan $val >> ~/.ssh/known_hosts
done

###

 ssh-keyscan web3 web4 web5 web6 >> .ssh/known_hosts
 
### 
 
 then can run the ansible playbook 
 ---------------------------------

########
 
 
 ---
- hosts: all
  become: yes
  gather_facts: no
  remote_user: vagrant

  tasks:

  - name: install ssh key
    authorized_key: user=vagrant 
                    key="{{ lookup('file', '/home/vagrant/.ssh/id_rsa.pub') }}" 
                    state=present
                    
                    
##########

ssh-keygen     : creates rsa pub/priv keys

##########

================================================================================================================================================================

Roles   e46-role-site.yml
+++++++++++++++++++++++++

---

# common
- hosts: all
  become: yes
  gather_facts: no

  roles:
    - common

# web
- hosts: web
  become: yes

  roles:
    - web

# lb
- hosts: lb
  become: yes

  roles:
    - lb

+++++++++++++++++++
   e46-site.yml
+++++++++++++++++++

---

# common
- hosts: all
  become: yes
  gather_facts: no

  tasks:

  - name: install git
    apt: name=git state=installed update_cache=yes

# web
- hosts: web
  become: yes

  tasks:

  - name: install nginx
    apt: name=nginx state=installed

  - name: write our nginx.conf
    template: src=templates/nginx.conf.j2 dest=/etc/nginx/nginx.conf
    notify: restart nginx

  - name: write our /etc/nginx/sites-available/default
    template: src=templates/default-site.j2 dest=/etc/nginx/sites-available/default
    notify: restart nginx

  - name: deploy website content
    template: src=templates/index.html.j2 dest=/usr/share/nginx/html/index.html

  handlers:

  - name: restart nginx
    service: name=nginx state=restarted

# lb
- hosts: lb
  become: yes

  tasks:

  - name: install haproxy and socat
    apt: pkg={{ item }} state=latest
    with_items:
    - haproxy
    - socat

  - name: enable haproxy
    lineinfile: dest=/etc/default/haproxy regexp="^ENABLED" line="ENABLED=1"
    notify: restart haproxy

  - name: deploy haproxy config
    template: src=templates/haproxy.cfg.j2 dest=/etc/haproxy/haproxy.cfg
    notify: restart haproxy

  handlers:

  - name: restart haproxy
    service: name=haproxy state=restarted
    
    
++++++++++++++++++++

ansible web1 -m setup -a "filter=ansible_hostname"


web1 | success >> {
    "ansible_facts": {
        "ansible_hostname": "web1"
    },
    "changed": false
}


index.html.j2
=============


less templates/index.html.j2 

Served by {{ ansible_hostname }} ({{ ansible_eth1.ipv4.address }}).




vagrant@mgmt:~$ ansible web1 -i hosts -m setup -a "filter=ansible_eth1"
[WARNING]: Found both group and host with same name: lb
web1 | SUCCESS => {
    "ansible_facts": {
        "ansible_eth1": {
            "active": true,
            "device": "eth1",
            "features": {


 "ipv4": {
                "address": "10.0.15.21",



haproxy.cfg.j2
==============


cat haproxy.cfg.j2


# {{ ansible_managed }}
global
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        root
    group       root
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats level admin

defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

    # enable stats uri
    stats enable
    stats uri /haproxy?stats

backend app
    {% for host in groups['lb'] %}
       listen episode46 {{ hostvars[host]['ansible_eth0']['ipv4']['address'] }}:80
    {% endfor %}
    balance     roundrobin
    {% for host in groups['web'] %}
        server {{ host }} {{ hostvars[host]['ansible_eth1']['ipv4']['address'] }} check port 80
    {% endfor %}

